#!/usr/bin/env python3

from pathlib import PurePath
from sys import stdin
from os import getenv

EMPTY    = "    "
NOCHILD  = "│   "
CHILD    = "├── "
ENDCHILD = "└── "
ANSI     = "\033[{code}m"
RESET = ANSI.format(code="0")

"""
def parse_lscolours() -> dict | None:
    raw = getenv("LS_COLORS")
    colors = {}
    if raw:
        for itm in raw.split(":"):
            if itm:
                k, v = itm.split("=")
                colors[k] = ANSI.format(code=v)
        return colors
    else:
        return None
"""
def parse_lscolours():
    return None

COLOURS = parse_lscolours()
SPECIAL = ['NULL', 'bd', 'ca', 'cd', 'cl', 'di', 'do', 'ec', 'ex', 'fi', 'lc', 'ln',
    'mh', 'mi', 'no', 'or', 'ow', 'pi', 'rc', 'rs', 'sg', 'so', 'st', 'su', 'tw',]

# this is heckin slow lmao, disabling for now with line 27
def colour(fn: str, dir: bool = False, symlink: bool = False) -> str:
    if COLOURS:
        c = "no"
        if symlink:
            c = "ln"
        elif dir:
            c = "di"
        elif fn not in SPECIAL:
            for code in COLOURS:
                if PurePath(fn).match(code):
                    c = code
                    break
        return COLOURS[c] + fn + RESET
    return fn

class Path:
    def __init__(self, path: str, target: str = None):
        self.path = PurePath(path)
        self.target = target

    @property
    def parts(self) -> list[str]:
        parts = list(self.path.parts)
        last_part = parts[-1]
        parts = [colour(p, dir=True) for p in parts[:-1]]
        if self.target:
            parts.append(f"{colour(last_part, symlink=True)} -> {colour(self.target)}")
        else:
            parts.append(colour(last_part))
        return parts

    def __str__(self):
        if self.target is not None:
            return f"{self.path} -> {self.target}"
        return f"{self.path}"

    def __repr__(self):
        return f"Path({self})"

def parse(raw: str) -> list[Path]:
    out = []
    for ln in sorted(raw.strip().splitlines(keepends=False)):
        if "->" in ln:
            link, _, target = ln.split(" ")
            out.append(Path(link, target=target))
        else:
            out.append(Path(ln.strip()))
    return out

def add_item(d: dict, itm: list):
    dir, *rest = itm
    if dir not in d:
        d[dir] = {}
    if rest:
        add_item(d[dir], rest)

def gen_tree(files: list[Path]) -> dict:
    tree = {}
    for f in files:
        add_item(tree, f.parts)
    return tree

def print_tree(tree: dict, pfx: str = "", top: bool = False):
    if not tree:
        return
    sep = CHILD
    dir_sep = NOCHILD
    entries = list(tree)
    for fn in entries:
        if fn is entries[-1]:
            sep = ENDCHILD
            dir_sep = EMPTY if not top else ""
        if isinstance(tree[fn], dict):
            if top:
                print(fn)
            else:
                print(pfx + sep + fn)
            print_tree(tree[fn], pfx + dir_sep)
        else:
            print(pfx + sep + fn)

if __name__ == "__main__":
    raw = parse(stdin.read())
    tree = gen_tree(raw)
    print_tree(tree, top=True)

