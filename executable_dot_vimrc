syntax on
set nocompatible
set number
set relativenumber
set updatetime=500
set encoding=utf-8
set hidden
set autowrite
set modeline modelines=5

if filereadable(expand("~/.vimrc_background"))
  let base16colorspace=256
  source ~/.vimrc_background
endif
set t_Co=256
set cursorline

set tw=120

" Set Proper Tabs
set tabstop=4 shiftwidth=4 expandtab

" Set Conceal Level
set conceallevel=0

" Always display the statusline
set laststatus=2

set incsearch
set inccommand=nosplit

" Tab colors
hi TabLineSel ctermbg=0

" Highlight unnecessary whitespace
set list listchars=tab:›\ ,extends:»,precedes:«,nbsp:␣,trail:·
highlight ExtraWhitespace ctermbg=0
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

" Highlight TODO, FIXME
syn match myTodo contained "\<\(TODO\|FIXME\|NOTE\|OPTIMIZE\)"

" Undo
if has("persistent_undo")
    set undodir=$HOME/.vim/undo/
    set undofile
endif

" Swap directory
set directory=$HOME/.vim/swapfiles//

" GVim Settings
if has('gui_running')
    set go=aic
    set mouse=n
    if has("gui_gtk2") || has("gui_gtk3")
        set guifont=Fira\ Code\ 11
    elseif has("gui_macvim")
        set guifont=Fira\ Code:h12
    elseif has("gui_win32")
        set guifont=Fira_Code:h10:cANSI:qDRAFT
    endif
endif

" Mappings
map ; <leader>
map <C-t> :VimtexTocToggle<CR>
vmap <C-c> "+y
vmap <C-x> "+d
nmap <C-p> "+p
noremap p "0p
noremap P "0P
for s:i in ['"','*','+','-','.',':','%','/','=','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']
    execute 'noremap "'.s:i.'p "'.s:i.'p'
    execute 'noremap "'.s:i.'P "'.s:i.'P'
endfor
map <F1> <nop>
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-h> <c-w>h
map <c-l> <c-w>l
nnoremap <C-Tab> gt
nnoremap <C-S-Tab> gT
tnoremap <Esc> <C-\><C-n>
com Wsudo w !sudo tee %

" Windows
if has("win32") || has("win16")
    vmap <C-x> "*d
    vmap <C-c> "*y
    nmap <C-p> "*p
    set rop=type:directx,gamma:1.0,contrast:0.5,level:1,geom:1,renmode:4,taamode:1
    set backspace=2
    let &t_AB="\e[48;5;%dm"
    let &t_AF="\e[38;5;%dm"
endif

let g:vundle_default_git_proto = 'git'
" set the runtime path to include Vundle and initialize
if has("win32") || has("win16")
    set rtp+=$HOME/.vim/bundle/Vundle.vim/
    call vundle#begin('$HOME/.vim/bundle/')
else
    set rtp+=~/.vim/bundle/Vundle.vim
    call vundle#begin()
endif

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
Plugin 'challenger-deep-theme/vim', { 'name': 'challenger-deep' }
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'tpope/vim-fugitive'
Plugin 'plasticboy/vim-markdown'
Plugin 'airblade/vim-gitgutter'
Plugin 'Raimondi/delimitMate'
Plugin 'lervag/vimtex'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-commentary'
Plugin 'vim-pandoc/vim-pandoc'
Plugin 'vim-pandoc/vim-pandoc-syntax'
Plugin 'chrisbra/Colorizer'
Plugin 'chrisbra/csv.vim'
if has('nvim')
    Plugin 'ncm2/ncm2'
    Plugin 'roxma/nvim-yarp'
    Plugin 'autozimu/LanguageClient-neovim', {
        \ 'branch': 'next',
        \ 'do': 'bash install.sh',
        \ }
else
    Plugin 'ncm2/ncm2'
    Plugin 'roxma/nvim-yarp'
    Plugin 'roxma/vim-hug-neovim-rpc'
endif
" ncm2 sources
Plugin 'ncm2/ncm2-bufword'
Plugin 'ncm2/ncm2-path'
Plugin 'ncm2/ncm2-jedi'
Plugin 'ncm2/ncm2-pyclang'
Plugin 'ncm2/ncm2-cssomni'
Plugin 'ncm2/ncm2-racer'

" All of your Plugins must be added before the following line
call vundle#end()           " required
filetype plugin indent on   " required

" Plugin Configs
colorscheme challenger_deep

" colorizer config
let g:colorizer_auto_color = 1

if has('nvim') || has('termguicolors')
  set termguicolors
  let g:colorizer_use_virtual_text = 1
endif

" delimitMate config
let delimitMate_expand_cr = 1

" Airline config
let g:airline_detect_modified = 1
let g:airline_detect_paste = 1
let g:airline_detect_crypt = 1
let g:airline_detect_spell = 1
let g:airline_theme='hybrid'
set noshowmode
let g:airline#extensions#default#layout = [ [ 'a', 'c' ], [ 'b' ] ]
let g:airline_mode_map = {
    \ '__' : '-', 'n'  : 'N', 'i'  : 'I',
    \ 'R'  : 'R', 'c'  : 'C', 'v'  : 'V',
    \ 'V'  : 'V-L', '' : 'V-B', 's'  : 'S',
    \ 'S'  : 'S', '' : 'S' }
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_close_button = 0
let g:airline#extensions#tabline#show_tab_type = 0
let g:airline#extensions#tabline#buffers_label = ''
let g:airline#extensions#quickfix#quickfix_text = 'QF'
let g:airline#extensions#quickfix#location_text = 'LOC'

" Markdown config
let g:vim_markdown_folding_disabled = 1
au FileType markdown vmap <Leader><Bslash> :EasyAlign*<Bar><CR>
let g:vim_markdown_conceal = 0
let g:vim_markdown_frontmatter = 1

" Vimtex config
" let g:vimtex_compiler_method = 'tectonic'
let g:vimtex_compiler_progname = 'nvr'
let g:vimtex_view_method = 'zathura'
let g:airline#extensions#vimtex#enabled = 1
let g:vimtex_fold_enabled = 1
let g:tex_conceal = 'abdmgs'
let g:vimtex_compiler_tectonic = { 'backend' : 'nvim' }

" Pandoc config
let g:pandoc#command#custom_open = 'MyPandocOpen'
function! MyPandocOpen(file)
    return 'zathura ' . shellescape(expand(a:file,':p'))
endfunction
com PandocInsModeline :normal Go[modeline]: # ( vim: set ft=pandoc: )<ESC>

let g:pandoc#biblio#sources = "bcg"
let g:pandoc#filetypes#handled = ["pandoc"]
let g:pandoc#filetypes#pandoc_markdown = 0
let g:pandoc#formatting#mode = 'hA'
let g:pandoc#command#autoexec_on_writes = 1
let g:pandoc#command#autoexec_command = 'Pandoc pdf -s'
com PandocOpen Pandoc! pdf -s

" ncm2
autocmd BufEnter * call ncm2#enable_for_buffer()
set completeopt=noinsert,menuone,noselect
set shortmess+=c
" Use <TAB> to select the popup menu:
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" LanguageClient-neovim
let g:LanguageClient_serverCommands = {
    \ 'rust': ['~/.cargo/bin/rustup', 'run', 'stable', 'rls'],
    \ 'javascript': ['/usr/local/bin/javascript-typescript-stdio'],
    \ 'javascript.jsx': ['tcp://127.0.0.1:2089'],
    \ 'python': ['/usr/bin/pyls'],
    \ 'ruby': ['~/.rbenv/shims/solargraph', 'stdio'],
    \ }
let g:LanguageClient_settingsPath = ".vim/settings.json"
let g:LanguageClient_loadSettings = 1
nnoremap <F5> :call LanguageClient_contextMenu()<CR>
